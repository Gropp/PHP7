<?php
/////////////////////////////////////////////////////////
//    ESSE INDEX.PHP CHAMA OS METODOS DA CLASSE SQL    //
//    EXECUTANDO EM UM BANCO DE DADOS COMANDOS SQLS    //
//    NECESSARIOS PARA A EXECUCAO DE ALGUMA NECESSI-   //
//    DADE DE UM PROGRAMA ESPECIFICO                   //
/////////////////////////////////////////////////////////

//incluimos o config.php
require_once("config.php");
//vamos criar o objeto $sql chamando a classe Sql que criamos e esta sendo carregada no autoload do config.php

/* ESSES COMANDOS FUNCIONAN, MAS AGORA VAMOS USAR A CLASSE DBTBUSUARIOS PARA FAZER AS OPERACOES NO BANCO
$sql = new Sql();
//vamos carregar a variavel usuarios com o retorno do select da tabela de usuarios do banco de dados - chamando o metodo select e passando os parametros
$usuarios = $sql->select("SELECT * FROM tb_usuarios");
//vamso retornar as linhas de resultado do objetos $usuarios com a ajuda do json
echo json_encode($usuarios); */

//IMPORTANTE:

//USANDO A CLASSE USUARIOS
//CARREGA UM USUARIO
//INSTANCIAMOS A CLASSE DBSELECT NA VARIAVEL $SELECT
$select = new DBTbUsuarios();
//O SELECT ESTA PROGRAMADO NO METODO LOADBYID DA CLASSE, UM SELECT * FROM TB_USUARIOS WHERE IDUSUARIO = :ID ** ONDE O PARAMETRO A SER PASSADO É O :ID OU SEJA, O VALOR PARA O WHERE, QUE SERA O FILTRO DO SELECT
//VOU PROCURAR O USUARIO CUJO O IDUSUARIO = 3
$select->loadById(3);
//COMO VOLTA COMO JSON PODEMOS USAR O ECHO AO INVES DO PRINT_R OU VAR_DUMP
echo $select;

//IMPORTANTE: VAMOS USAR UM METODO STATIC DENTRO DA CLASSE SQL - ESSE METODO NAO MANIPULA DIRETAMENTE ATRIBUTOS DA CLASSE, ENTAO A VANTAGEM É QUE PODEMOS CHAMA-LO SEM INSTANCIAR A CLASSE!!!! É UM METODO PODEROSO, FUNCIONA DENTRO E FORA DA CLASSE
//CARREGA UMA LISTA DE USUARIOS
//Atribui a uma variavel o retorno da CLASSE::METODO();
$lista = DBTbUsuarios::getList();
echo json_encode($lista);

//IMPORTANTE: METODO STATICO SEARCH QUE BUSCA UMA STRING DENTRO DO CAMPO DESLOGIN
//COMO O METODO É STATIC NAO PRECISA INSTANCIAR A CLASSE
//Atribui a uma variavel o retorno da CLASSE::METODO("VARIAVEL");
//VAI FAZER UM SELECT NA TABELA TB_USUARIOS ONDE O IDLOGIN TENHA A STRING JO CONTIDA NO NOME
$search = DBTbUsuarios::search("jo")

//IMPORTANTE: CARREGA UM USUARIO USANDO O LOGIN E A SENHA - A CLASSE NAO É ESTATICA, TEM QUE SER INSTANCIADA
$usuario = new DBTbUsuarios();
//PASSAR UM LOGIN E UM USUARIO VALIDOS
$usuario->login("user","passwd");
echo $usuario;

//INSERT DE UM USUARIO NOVO
//CADA VEZ QUE EXECUTAR ESSE PHP7, ELE APPENDA UM NOVO USUARIO
//O METODO INSERT NAO TEM PARAMETROS, POREM ANTES DE CHAMA-LO É PRECISO SETAR O LOGIN E A SENHA DO NOVO USUARIO/ALUNO
$aluno = new DBTbUsuarios();
//IMPORTANTE:
//COM A INCLUSAO DO METODO CONSTRUTOR, ESSAS ATRIBUICOES VAO PARA O ARGUMENTO DA CHAMADA DO METODO INSERT!!!!
#$aluno->setDeslogin("aluno"); //VARCHAR(64)
#$aluno->setDessenha("@lun0"); //VARCHAR(256)
//APOS SETAR OS ATRIBUTOS COM OS VALORES REQUERIDOS, ENTAO CHAMAMOS O METODO DE INSERT DA CLASSE DBTbUsuarios - sem nenhum parametro!
#$aluno->insert(); //SEM O METODO CONSTRUTOR
$aluno->insert("aluno","4lun0"); //COM O METODO CONSTRUTOR
//COMO A STORE PROCEDURE QUE CRIAMOS RETORNA UM SELECT DO ULTIMO ID INCLUIDO NA TABELA, E O METODO DBTbUsuarios TEM A FUNCAO MAGICA __TOSTRING COM JSON, PODEMOS MOSTRAR ESSE RETORNO COM UM ECHO!
echo $aluno;
//FAZENDO UM UPDATE EM UM USUARIO
//INSTANCIA A CLASSE DBTBUSUARIOS
$alter = new DBTbUsuarios();
//CARREGA O REGISTRO QUE VOCE QUER ALTERAR PARA CARREGAR O ATRIBUTO IDUSUARIO, QUE É ATRIBUIDO DURANTE O SELECT
$alter->loadById("idusuario");
//ENTAO CHAMA O METODO UPDATE COM OS DADOS PARA SEREM ALTERADOS, E O METODO UPDATE UTILIZA O $this->getIdusuario PARA PEGAR O ID DO USUARIO CORRENTE E USAR NO FILTRO DO WHERE 
$alter->update("professor","%$#54332#");
echo $alter;